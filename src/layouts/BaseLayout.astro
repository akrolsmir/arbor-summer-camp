---
import BlobCursorFollower from "@/components/global/BlobCursorFollower.astro";
import { AstroSeo, type AstroSeoProps } from "@astrolib/seo";
import BaseHead from "@components/BaseHead.astro";
import BackgroundTexture from "@components/global/BackgroundTexture.astro";
import Footer from "@components/global/Footer.astro";
import Navigation from "@components/global/Navigation.astro";
import { getLangFromUrl } from "../i18n/utils";

const { pathname } = Astro.url;

type Props = {
	seo?: AstroSeoProps;
};

const { seo: seoProp } = Astro.props;

const lang = getLangFromUrl(Astro.url);

const shareImage = new URL("/images/meta/adverse_selection_banner.webp ", Astro.site).toString();

const defaultSeo: AstroSeoProps = {
	title: "Summer Camp",
	description:
		"A container for the greater Lighthaven community to run intimate, multi-day events in the most target-rich environment that exists for them, anywhere in the world, any time in the year.",
	canonical: "https://summercampcomingsoon.com",
	openGraph: {
		url: "https://summercampcomingsoon.com",
		title: "Summer Camp",
		description:
			"A container for the greater Lighthaven community to run intimate, multi-day events in the most target-rich environment that exists for them, anywhere in the world, any time in the year.",
		images: [
			{
				url: shareImage,
				width: 1200,
				height: 630,
				alt: "Social open graph",
				type: "image/gif",
			},
			{
				url: shareImage,
				width: 4096,
				height: 4096,
				alt: "Twitter open graph",
				type: "image/gif",
			},
		],
		site_name: "Summer Camp",
	},
	// twitter: {
	// 	handle: "@summercampcomingsoon",
	// 	site: "@summercampcomingsoon",
	// 	cardType: "summary_large_image",
	// },
	additionalMetaTags: [
		{
			name: "publisher",
			content: "Arbor",
		},
	],
};

const seo = {
	...defaultSeo,
	...seoProp,
};

function cursorFollowerActive() {
	const paths = ["", "/", "/it/", "/it"];
	return paths.includes(pathname);
}
---

<html lang={lang} class="light">
	<head>
		<BaseHead />
		<AstroSeo {...seo} />
		<script>
			// Force light mode
			localStorage.setItem('theme', 'light');
			document.documentElement.classList.remove('dark');
			document.documentElement.classList.add('light');
		</script>
		<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Lora:wght@400;500;600&display=swap" />
	</head>
	<body class="bg-sky-50 text-forest-800 font-serif">
		<!-- Background image with parallax effect --> 
		<div id="background-image" class="fixed inset-0 bg-[url('/images/scarborough_day_background_2.png')] bg-cover bg-center opacity-100 z-[0] mask-gradient"></div>
		
		<!-- Watercolor wash effect -->
		<div class="fixed inset-0 bg-gradient-radial from-transparent via-sky-100/20 to-meadow-100/10 mix-blend-soft-light z-[1]"></div>
		
		<!-- Very light white overlay to mute the background without hiding it -->
		<div class="fixed inset-0 bg-white/20 z-[2]"></div>
		
		<!-- Paper texture overlay for the entire site -->
		<div class="fixed inset-0 bg-[url('https://www.transparenttextures.com/patterns/paper-fibers.png')] opacity-25 mix-blend-overlay z-[3]"></div>
		
		<!-- Fireflies across the page - subtle ambient effect -->
		<div class="fireflies-container fixed w-full h-full overflow-hidden z-[4] pointer-events-none">
		</div>
		
		<!-- Diagonal string lights -->
		<div class="string-lights-container fixed w-full h-full z-[5] pointer-events-none">
			<div class="string-lights-diagonal"></div>
		</div>
		
		<!-- Subtle vignette effect -->
		<div class="fixed inset-0 bg-gradient-radial from-transparent to-black/20 mix-blend-multiply z-[6] pointer-events-none"></div>
		
		<Navigation />
		<!-- {cursorFollowerActive() && <BlobCursorFollower />} -->
		<slot />
		<Footer />
		
		<script>
			import { gsap } from "gsap";
			import { ScrollTrigger } from "gsap/ScrollTrigger";
			
			gsap.registerPlugin(ScrollTrigger);
			
			document.addEventListener("DOMContentLoaded", () => {
				// Create fireflies dynamically
				createFireflies();
				
				// Create a timeline for background transitions and parallax
				const backgroundTl = gsap.timeline({
					scrollTrigger: {
						trigger: "#hero",
						start: "top top",
						end: "bottom top",
						scrub: true,
					}
				});
				
				// Parallax effect - move background image up as user scrolls down
				backgroundTl.to("#background-image", {
					y: "-100%", // Move up by 100% of its height
					ease: "none"
				});

				// Fade out background image as user scrolls
				backgroundTl.to("#background-image", {
					opacity: 0.2,
					ease: "power1.inOut"
				}, "<"); // Start at the same time as the parallax effect
			});
			
			// Create fireflies dynamically
			function createFireflies() {
				const firefliesContainer = document.querySelector('.fireflies-container');
				if (!firefliesContainer) return;
				
				for (let i = 0; i < 30; i++) {
					const firefly = document.createElement('div');
					firefly.classList.add('firefly');
					
					// Random positioning
					firefly.style.left = `${Math.random() * 100}%`;
					firefly.style.top = `${Math.random() * 100}%`;
					
					// Random animation delay
					firefly.style.animationDelay = `${Math.random() * 8}s`;
					
					// Random size variation
					const size = 2 + Math.random() * 3;
					firefly.style.width = `${size}px`;
					firefly.style.height = `${size}px`;
					
					// Random colors - warm yellow/orange tones
					const hue = Math.floor(Math.random() * 30) + 40; // yellows and light oranges
					const saturation = Math.floor(Math.random() * 20) + 80; // fairly saturated
					const lightness = Math.floor(Math.random() * 10) + 80; // very light colors
					firefly.style.backgroundColor = `hsla(${hue}, ${saturation}%, ${lightness}%, 0.8)`;
					firefly.style.boxShadow = `0 0 ${5 + Math.random() * 5}px 1px hsla(${hue}, ${saturation}%, ${lightness}%, 0.5)`;
					
					firefliesContainer.appendChild(firefly);
				}
			}
		</script>
	</body>
</html>

<style>
	/* Diagonal hanging string lights - daytime version */
	.string-lights-container {
		position: fixed;
		width: 100%;
		height: 100%;
		pointer-events: none;
	}
	
	.string-lights-diagonal {
		position: absolute;
		width: 100%;
		height: 100%;
		background-image: 
			radial-gradient(circle, rgba(255,255,255,0.9) 0%, rgba(255,255,255,0) 70%),
			linear-gradient(to bottom, transparent, transparent);
		background-size: 30px 30px, 100% 100%;
		background-position: 0 0, 0 0;
		background-repeat: space, no-repeat;
		mask-image: 
			linear-gradient(45deg, #000 1px, transparent 1px),
			linear-gradient(135deg, #000 1px, transparent 1px);
		mask-size: 30px 30px, 30px 30px;
		mask-position: 0 0, 0 0;
		animation: daytime-twinkle 5s infinite alternate;
	}

	@keyframes daytime-twinkle {
		0% {
			opacity: 0.3;
			filter: blur(0.5px) brightness(1);
		}
		50% {
			opacity: 0.5;
			filter: blur(0.5px) brightness(1.2);
		}
		100% {
			opacity: 0.4;
			filter: blur(0.5px) brightness(1.1);
		}
	}

	/* Enhance overall typography */
	:global(h1, h2, h3, h4) {
		font-family: 'Playfair Display', serif;
		letter-spacing: -0.025em;
		text-shadow: 0 1px 2px rgba(255, 255, 255, 0.3);
	}
	
	:global(body) {
		font-family: 'Lora', serif;
	}

	:global(p) {
		text-shadow: 0 0.5px 1px rgba(255, 255, 255, 0.2);
	}

	.mask-gradient {
		-webkit-mask-image: linear-gradient(to bottom, 
			rgba(0,0,0,1) 0%, 
			rgba(0,0,0,0.95) 40%, 
			rgba(0,0,0,0.9) 90%, 
			rgba(0,0,0,0) 100%);
		mask-image: linear-gradient(to bottom, 
			rgba(0,0,0,1) 0%, 
			rgba(0,0,0,0.95) 40%, 
			rgba(0,0,0,0.9) 90%, 
			rgba(0,0,0,0) 100%);
	}

	.deckled-edge {
		position: relative;
	}

	.deckled-edge::after {
		content: "";
		position: absolute;
		bottom: -10px;
		left: 0;
		right: 0;
		height: 10px;
		background-image: url('/images/deckled-edge.png');
		background-repeat: repeat-x;
		background-size: 20px 10px;
	}
</style>
