---
import { getLangFromUrl, useTranslations, useTranslatedPath } from "@i18n/utils";

const { class: className } = Astro.props;

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

const faqs = [
	{
		question: t("faqs.question1"),
		answer: t("faqs.answer1"),
	},
	{
		question: t("faqs.question2"),
		answer: t("faqs.answer2"),
	},
	{
		question: t("faqs.question3"),
		answer: t("faqs.answer3"),
	},
	{
		question: t("faqs.question4"),
		answer: t("faqs.answer4"),
	},
	{
		question: t("faqs.question5"),
		answer: t("faqs.answer5"),
	},
	{
		question: t("faqs.question6"),
		answer: t("faqs.answer6"),
	},
];
---

<section id="faq" class="section col-span-12 relative py-20 lg:py-32">
	<!-- Add butterflies for ambient effect -->
	<div class="fireflies absolute inset-0 z-0"></div>
	
	<div class="relative col-span-12 z-10 mx-auto max-w-7xl px-8">
		<!-- Section heading with decorative element -->
		<div class="mt-16 mb-8 text-center">
			<h2 class="section-title-daytime pb-4">FAQ</h2>
		</div>

		<div class="faq-list mx-auto max-w-3xl space-y-6">
			{
				faqs.map(({ question, answer }) => (
					<details class="group daytime-paper">
						<summary class="flex cursor-pointer items-center justify-between px-6 py-4 font-display text-lg font-medium text-forest-700">
							<span>{question}</span>
							<svg 
								xmlns="http://www.w3.org/2000/svg" 
								class="h-5 w-5 transform transition-transform duration-300 group-open:rotate-180 text-forest-600" 
								viewBox="0 0 20 20" 
								fill="currentColor"
							>
								<path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
							</svg>
						</summary>
						<div class="px-6 pb-6 pt-2">
							<p class="text-forest-700">{answer}</p>
						</div>
					</details>
				))
			}
		</div>
	</div>
		
	<!-- Add some horizontal string lights at the top of the section
	<div class="absolute top-0 left-0 right-0 h-10 overflow-hidden">
		<div class="string-lights-horizontal-day"></div>
	</div> -->
</section>

<style>
	/* Style the FAQ details/summary elements */
	summary {
		list-style: none;
	}
	
	summary::-webkit-details-marker {
		display: none;
	}
	
	details {
		transition: all 0.3s ease;
	}
	
	details[open] {
		box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
	}
	
	/* Daytime paper styling */
	.daytime-paper {
		background-color: rgba(255, 253, 240, 0.97);
		background-image: url('https://www.transparenttextures.com/patterns/parchment.png');
		background-blend-mode: overlay;
		border-radius: 0.5rem;
		box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
	}
	
	/* Butterfly styling */
	.butterfly {
		position: absolute;
		width: 12px;
		height: 10px;
		background-color: rgba(255, 255, 255, 0.9);
		box-shadow: 0 0 5px 1px rgba(255, 255, 255, 0.5);
		clip-path: polygon(
			0% 50%, 
			25% 0%, 
			75% 0%, 
			100% 50%, 
			75% 100%, 
			25% 100%
		);
		animation: butterfly 8s infinite ease-in-out;
		z-index: 1;
	}
</style>

<style is:global>
	.faq-section {
		--faq-clip: 0;
		--faq-radius: 0;
		clip-path: inset(var(--faq-clip) round var(--faq-radius));
		margin-top: -1px; /* Fix weird clip path behavior */
	}
</style>

<script>
	import { gsap } from "gsap";
	import { ScrollTrigger } from "gsap/ScrollTrigger";
	import { DrawSVGPlugin } from "gsap/DrawSVGPlugin";

	gsap.registerPlugin(ScrollTrigger, DrawSVGPlugin);

	// Replace createButterflies function with createFireflies
	function createFireflies() {
	const sectionElement = document.querySelector('#your-section-id');
	if (!sectionElement) return;
	
	const firefliesContainer = sectionElement.querySelector('.fireflies');
	if (!firefliesContainer) return;
	
	for (let i = 0; i < 15; i++) {
		const firefly = document.createElement('div');
		firefly.classList.add('firefly');
		
		// Random positioning
		firefly.style.left = `${Math.random() * 100}%`;
		firefly.style.top = `${Math.random() * 100}%`;
		
		// Random animation delay
		firefly.style.animationDelay = `${Math.random() * 8}s`;
		
		// Random size variation
		const size = 2 + Math.random() * 3;
		firefly.style.width = `${size}px`;
		firefly.style.height = `${size}px`;
		
		// Random colors - warm yellow/orange tones
		const hue = Math.floor(Math.random() * 30) + 40; // yellows and light oranges
		const saturation = Math.floor(Math.random() * 20) + 80; // fairly saturated
		const lightness = Math.floor(Math.random() * 10) + 80; // very light colors
		firefly.style.backgroundColor = `hsla(${hue}, ${saturation}%, ${lightness}%, 0.8)`;
		firefly.style.boxShadow = `0 0 ${5 + Math.random() * 5}px 1px hsla(${hue}, ${saturation}%, ${lightness}%, 0.5)`;
		
		firefliesContainer.appendChild(firefly);
	}
	}

	function init() {
		createFireflies();
		
		gsap.to("#faq", {
			scrollTrigger: {
				trigger: "#faq",
				start: "bottom center",
				end: "bottom top",
				scrub: 1,
				markers: false,
			},
			"--faq-clip": "2vw",
			"--faq-radius": "5rem",
		});

		const linePath = document.querySelector("#faq-more-question-path");

		if (linePath) {
			gsap.set(linePath, { drawSVG: 0 });

			let otherQTl = gsap
				.timeline({
					scrollTrigger: {
						trigger: ".faq-more-questions",
						start: "center 90%",
						end: "center top",
						markers: false,
						toggleActions: "play none none reverse",
					},
				})
				.to(".faq-more-questions .other-question-title", {
					opacity: 1,
					duration: 0.5,
				})
				.to(
					linePath,
					{
						drawSVG: "100%",
						duration: 2,
					},
					"<",
				)
				.to(
					".faq-contact-us-button",
					{
						opacity: 1,
					},
					">-=1.5",
				);
		}
		
		// Add hover animation to FAQ items
		const faqItems = document.querySelectorAll('.faq-list details');
		faqItems.forEach(item => {
			item.addEventListener('mouseenter', () => {
				gsap.to(item, {
					y: -5,
					boxShadow: '0 8px 20px rgba(0, 0, 0, 0.15)',
					duration: 0.3
				});
			});
			
			item.addEventListener('mouseleave', () => {
				if (!item.hasAttribute('open')) {
					gsap.to(item, {
						y: 0,
						boxShadow: '0 5px 15px rgba(0, 0, 0, 0.1)',
						duration: 0.3
					});
				}
			});
		});
	}

	document.removeEventListener("DOMContentLoaded", init);
	document.addEventListener("DOMContentLoaded", init);
</script>
