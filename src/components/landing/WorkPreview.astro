---
import { getLangFromUrl, useTranslations, useTranslatedPath } from "@i18n/utils";
import { Icon } from "astro-icon/components";

const { class: className } = Astro.props;

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

// Define projects
const projects = [
	{
		title: "Trading Bootcamp",
		description: "Learn to think like a trader",
		longDescription: "Our Trading Bootcamp offers an immersive experience where participants learn trading strategies through hands-on practice. You'll work with experienced traders, engage in simulated market scenarios, and develop your own trading style. Perfect for beginners and intermediate traders looking to sharpen their skills in a supportive environment.",
		image: "/images/_theo_presenting_2_cropped.jpeg",
		link: "#"
	},
	{
		title: "Paint Drying Bootcamp",
		description: "Learn to not think for a change",
		longDescription: "This was originally an April Fools' joke, but we happened to sell some tickets so we're going to paint a wall of Mox. Painting will happen Thursday night, and watching the paint dry will happen at Tradegala Friday night. Includes VIP tickets to Tradegala.",
		image: "/images/mox_mural.png",
		link: "#"
	},
	{
		title: "Tradegala",
		description: "A markets-infused costume party celebrating Arbor's launch",
		longDescription: "A markets-infused costume party celebrating Arbor's launch. Attendees will be given Clips, our play currency, and encouraged to trade on various activities. The theme of the evening is Trees.",
		image: "/images/tradegala_cover.png",
		link: "#"
	},
	{
		title: "Provide Your Own Liquidity",
		description: "A chaotic auction of weird goods and services",
		longDescription: "PYOL is our trading bootcamp afterparty and auction. Participants bid on bespoke goods and services of various weird flavors using Clips, our play currency. You can only bid on auction items once you have Clips â€” which you can get by taking the bootcamp, by attending Tradegala two nights earlier, or by selling your goods and services in the auction.",
		image: "/images/pyol.png",
		link: "#"
	}
];
---

<section id="work" class:list={["work-preview-section relative py-8 lg:py-16", className]}>
	<!-- No need for a gradient transition at the top anymore -->
	
	<!-- Add butterflies container -->
	<!-- <div class="butterflies absolute inset-0 z-0"></div> -->
	
	<div class="mx-auto max-w-8xl px-16 relative z-10">
		<!-- Section heading with decorative element -->
		<div class="mb-12 text-center">
			<h2 class="section-title-daytime pb-0">{t("branch")}</h2>
		</div>
		
		<!-- Carousel container -->
		<div class="carousel-container relative">
			<!-- Carousel track -->
			<div class="carousel-track flex">
				{
					projects.map((project, index) => (
						<div class="carousel-item w-full flex-shrink-0 px-4" data-index={index}>
							<div class="daytime-paper overflow-hidden group h-full" data-project={JSON.stringify(project)}>
								<div class="block h-full cursor-pointer">
									<div class="relative overflow-hidden h-64">
										<img 
											src={project.image} 
											alt={project.title} 
											class="w-full h-full object-cover transition-transform duration-700 group-hover:scale-105"
										/>
										<!-- Overlay gradient -->

									</div>
									<div class="p-6">
										<h3 class="font-display text-2xl font-bold text-forest-700 mb-2">{project.title}</h3>
										<p class="text-forest-600 mb-4">{project.description}</p>
										<div class="flex items-center text-meadow-800 font-medium">
											<span>Read more</span>
											<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 ml-2 group-hover:translate-x-1 transition-transform">
												<path stroke-linecap="round" stroke-linejoin="round" d="M13.5 4.5L21 12m0 0l-7.5 7.5M21 12H3" />
											</svg>
										</div>
									</div>
								</div>
							</div>
						</div>
					))
				}
			</div>
		</div>
	</div>
	
	<!-- Carousel navigation buttons - moved here -->
	<div class="carousel-controls relative max-w-8xl mx-auto px-4">
		<button class="carousel-prev absolute left-4 top-1/2 -translate-y-1/2 bg-white/80 hover:bg-white p-2 rounded-full shadow-md z-10">
			<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 text-forest-700">
				<path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5" />
			</svg>
		</button>
		<button class="carousel-next absolute right-4 top-1/2 -translate-y-1/2 bg-white/80 hover:bg-white p-2 rounded-full shadow-md z-10">
			<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 text-forest-700">
				<path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
			</svg>
		</button>
	</div>
	
	<!-- Modal for project details -->
	<div id="project-modal" class="fixed inset-0 z-[1000] flex items-center justify-center p-4 bg-black/80 opacity-0 pointer-events-none transition-opacity duration-300 backdrop-blur-sm">
		<div class="daytime-paper max-w-4xl w-full max-h-[90vh] overflow-y-auto relative z-[1001]">
			<div class="p-6">
				<div class="flex justify-between items-start mb-4">
					<h3 id="modal-title" class="font-display text-3xl font-bold text-forest-700"></h3>
					<button id="close-modal" class="text-forest-500 hover:text-forest-700 focus:outline-none focus:ring-2 focus:ring-forest-500 rounded-full p-1">
						<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
							<path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
						</svg>
					</button>
				</div>
				<div id="modal-content"></div>
			</div>
		</div>
	</div>
</section>

<style>
	.work-preview-section {
		position: relative;
		width: 100%;
	}
	
	/* Carousel styles */
	.carousel-container {
		overflow: hidden;
		position: relative;
		padding: 0;
	}
	
	.carousel-track {
		display: flex;
		transition: transform 0.3s ease-out;
	}
	
	.carousel-item {
		width: 100%;
		flex-shrink: 0;
	}
	
	/* Paper texture */
	.daytime-paper {
		position: relative;
		background-color: white;
		border-radius: 0.5rem;
		box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
	}
	
	.daytime-paper::before {
		content: "";
		position: absolute;
		inset: 0;
		background-image: url('https://www.transparenttextures.com/patterns/paper.png');
		opacity: 0.4;
		pointer-events: none;
		z-index: 1;
		border-radius: 0.5rem;
	}
	
	/* Butterfly animation */
	.butterfly {
		position: absolute;
		width: 12px;
		height: 10px;
		background-color: rgba(255, 255, 255, 0.9);
		box-shadow: 0 0 5px 1px rgba(255, 255, 255, 0.5);
		clip-path: polygon(
			0% 50%, 
			25% 0%, 
			75% 0%, 
			100% 50%, 
			75% 100%, 
			25% 100%
		);
		animation: butterfly 8s ease-in-out infinite;
		z-index: 1;
	}
	
	@keyframes butterfly {
		0%, 100% {
			transform: translate(0, 0) rotate(0deg) scale(1);
		}
		25% {
			transform: translate(10px, -15px) rotate(5deg) scale(1.05);
		}
		50% {
			transform: translate(20px, 0) rotate(-5deg) scale(1);
		}
		75% {
			transform: translate(10px, 15px) rotate(5deg) scale(1.05);
		}
	}
	
	/* Responsive adjustments */
	@media (min-width: 768px) {
		.carousel-item {
			width: 50%;
		}
	}
	
	@media (min-width: 1024px) {
		.carousel-item {
			width: 33.333%;
		}
	}
	
	/* Modal styles */
	#project-modal {
		will-change: opacity;
	}
	
	#project-modal .daytime-paper {
		will-change: transform;
		max-height: 90vh;
	}
	
	/* Improve scrollbar in modal */
	#project-modal .daytime-paper::-webkit-scrollbar {
		width: 6px;
	}
	
	#project-modal .daytime-paper::-webkit-scrollbar-track {
		background: rgba(255, 255, 255, 0.1);
		border-radius: 3px;
	}
	
	#project-modal .daytime-paper::-webkit-scrollbar-thumb {
		background-color: rgba(79, 70, 229, 0.2);
		border-radius: 3px;
	}
	
	#project-modal .daytime-paper::-webkit-scrollbar-thumb:hover {
		background-color: rgba(79, 70, 229, 0.4);
	}
	
	/* Ensure modal is on top of everything */
	body.modal-open {
		position: relative;
	}
	
	body.modal-open #project-modal {
		position: fixed;
		z-index: 9999 !important; /* Use !important to override any other z-index */
	}
	
	/* Ensure the modal content is above the backdrop */
	#project-modal .daytime-paper {
		position: relative;
		z-index: 10000 !important;
	}
	
	/* Add styles for the carousel controls container */
	.carousel-controls {
		position: relative;
		margin-top: -200px; /* Adjust this value to position the buttons vertically */
		height: 0;
		pointer-events: none; /* This allows clicks to pass through to elements below */
	}
	
	.carousel-controls button {
		pointer-events: auto; /* Re-enable pointer events for the buttons */
	}
</style>

<script>
	// Create butterflies for ambient effect
	function createButterflies() {
		const workSection = document.getElementById('work');
		if (!workSection) return;
		
		const butterfliesContainer = workSection.querySelector('.butterflies');
		if (!butterfliesContainer) return;
		
		for (let i = 0; i < 10; i++) {
			const butterfly = document.createElement('div');
			butterfly.classList.add('butterfly');
			
			// Random positioning
			butterfly.style.left = `${Math.random() * 100}%`;
			butterfly.style.top = `${Math.random() * 100}%`;
			
			// Random animation delay
			butterfly.style.animationDelay = `${Math.random() * 6}s`;
			
			// Random colors - light pastel shades
			const hue = Math.floor(Math.random() * 60) + 160; // blues and greens
			const saturation = Math.floor(Math.random() * 30) + 70; // fairly saturated
			const lightness = Math.floor(Math.random() * 20) + 70; // light colors
			butterfly.style.backgroundColor = `hsla(${hue}, ${saturation}%, ${lightness}%, 0.7)`;
			
			butterfliesContainer.appendChild(butterfly);
		}
	}
	
	// Carousel functionality
	function setupCarousel() {
		const track = document.querySelector('.carousel-track');
		const items = document.querySelectorAll('.carousel-item');
		const prevButton = document.querySelector('.carousel-prev');
		const nextButton = document.querySelector('.carousel-next');
		const carouselContainer = document.querySelector('.carousel-container');
		
		if (!track || !items.length || !prevButton || !nextButton || !carouselContainer) return;
		
		let currentTranslateX = 0;
		let itemWidth = items[0].offsetWidth;
		const maxTranslate = (items.length * itemWidth) - carouselContainer.offsetWidth;
		
		// Touch tracking variables
		let touchStartX = 0;
		let touchEndX = 0;
		let isDragging = false;
		let startTranslateX = 0;
		
		// Update carousel position
		function updateCarouselPosition(translateX) {
			// Ensure we don't scroll past the bounds
			currentTranslateX = Math.max(0, Math.min(translateX, maxTranslate));
			track.style.transform = `translateX(-${currentTranslateX}px)`;
			
			// Update button states
			prevButton.disabled = currentTranslateX <= 0;
			prevButton.style.opacity = currentTranslateX <= 0 ? '0.5' : '1';
			nextButton.disabled = currentTranslateX >= maxTranslate;
			nextButton.style.opacity = currentTranslateX >= maxTranslate ? '0.5' : '1';
		}
		
		// Handle window resize
		function handleResize() {
			itemWidth = items[0].offsetWidth;
			const containerWidth = carouselContainer.offsetWidth;
			const newMaxTranslate = (items.length * itemWidth) - containerWidth;
			
			// Adjust current position if needed
			if (currentTranslateX > newMaxTranslate) {
				currentTranslateX = newMaxTranslate;
				updateCarouselPosition(currentTranslateX);
			}
		}
		
		// Event listeners for navigation buttons
		prevButton.addEventListener('click', () => {
			// Move left by 1/3 of the container width
			const moveAmount = carouselContainer.offsetWidth / 3;
			updateCarouselPosition(currentTranslateX - moveAmount);
		});
		
		nextButton.addEventListener('click', () => {
			// Move right by 1/3 of the container width
			const moveAmount = carouselContainer.offsetWidth / 3;
			updateCarouselPosition(currentTranslateX + moveAmount);
		});
		
		// Add wheel event listener for trackpad swipes
		let wheelDeltaX = 0;
		let isScrolling;
		
		carouselContainer.addEventListener('wheel', (e) => {
			// Detect horizontal scrolling with trackpad
			if (Math.abs(e.deltaX) > Math.abs(e.deltaY)) {
				e.preventDefault();
				
				// Accumulate deltaX with a damping factor for smoother scrolling
				wheelDeltaX += e.deltaX * 0.5;
				
				// Update position
				updateCarouselPosition(currentTranslateX + wheelDeltaX);
				
				// Reset accumulated delta after a short delay
				clearTimeout(isScrolling);
				isScrolling = setTimeout(() => {
					wheelDeltaX = 0;
				}, 150);
			}
		}, { passive: false });
		
		// Touch events for mobile swipe
		carouselContainer.addEventListener('touchstart', (e) => {
			touchStartX = e.touches[0].clientX;
			isDragging = true;
			startTranslateX = currentTranslateX;
			
			// Disable transition during drag
			track.style.transition = 'none';
		}, { passive: true });
		
		carouselContainer.addEventListener('touchmove', (e) => {
			if (!isDragging) return;
			
			touchEndX = e.touches[0].clientX;
			const diffX = touchStartX - touchEndX;
			
			// Move the track with finger
			updateCarouselPosition(startTranslateX + diffX);
		}, { passive: true });
		
		carouselContainer.addEventListener('touchend', () => {
			if (!isDragging) return;
			isDragging = false;
			
			// Re-enable transition
			track.style.transition = 'transform 0.3s ease-out';
		}, { passive: true });
		
		// Handle window resize
		window.addEventListener('resize', handleResize);
		
		// Initial setup
		handleResize();
	}
	
	// Handle modal functionality
	function setupModal() {
		const projectCards = document.querySelectorAll('[data-project]');
		const modal = document.getElementById('project-modal');
		const modalTitle = document.getElementById('modal-title');
		const modalContent = document.getElementById('modal-content');
		const closeModal = document.getElementById('close-modal');
		const modalDialog = modal?.querySelector('.daytime-paper');
		
		if (!modal || !modalTitle || !modalContent || !closeModal || !modalDialog) return;
		
		// Function to open modal
		function openModal(projectData) {
			modalTitle.textContent = projectData.title || '';
			modalContent.innerHTML = `
				<img src="${projectData.image}" alt="${projectData.title}" class="w-full h-64 object-cover rounded-lg mb-4">
				<p class="text-forest-600 mb-6">${projectData.longDescription || projectData.description || ''}</p>
				<a href="${projectData.link}" class="inline-block px-5 py-2 bg-sky-600 text-white rounded-lg hover:bg-sky-700 transition-colors">Buy tickets</a>
			`;
			
			// Show modal
			modal.classList.add('opacity-100', 'pointer-events-auto');
			
			// Prevent background scrolling
			document.body.style.overflow = 'hidden';
			
			// Focus on the modal dialog for accessibility
			closeModal.focus();
			
			// Add animation to the modal dialog
			modalDialog.animate(
				[
					{ opacity: 0, transform: 'scale(0.95)' },
					{ opacity: 1, transform: 'scale(1)' }
				],
				{ duration: 200, easing: 'ease-out' }
			);
			
			// Force the modal to be on top of everything
			document.querySelectorAll('section, header, footer, .fixed').forEach(el => {
				if (el !== modal && !modal.contains(el)) {
					el.style.position = el.style.position || getComputedStyle(el).position;
					el.dataset.originalZIndex = el.style.zIndex || getComputedStyle(el).zIndex;
					
					// Only adjust z-index if the element might be above our modal
					const zIndex = parseInt(el.dataset.originalZIndex) || 0;
					if (zIndex >= 900) {
						el.style.zIndex = '899';
					}
				}
			});
		}
		
		// Function to close modal
		function closeModalFunc() {
			// Animate closing
			const animation = modalDialog.animate(
				[
					{ opacity: 1, transform: 'scale(1)' },
					{ opacity: 0, transform: 'scale(0.95)' }
				],
				{ duration: 150, easing: 'ease-in' }
			);
			
			animation.onfinish = () => {
				modal.classList.remove('opacity-100', 'pointer-events-auto');
				// Re-enable scrolling
				document.body.style.overflow = '';
				
				// Restore original z-index values
				document.querySelectorAll('[data-original-z-index]').forEach(el => {
					if (el.dataset.originalZIndex) {
						el.style.zIndex = el.dataset.originalZIndex;
						delete el.dataset.originalZIndex;
					}
				});
			};
		}
		
		// Add click event to project cards
		projectCards.forEach(card => {
			card.addEventListener('click', (e) => {
				e.preventDefault();
				const projectData = JSON.parse(card.getAttribute('data-project') || '{}');
				openModal(projectData);
			});
		});
		
		// Close modal when clicking the close button
		closeModal.addEventListener('click', closeModalFunc);
		
		// Close modal when clicking outside
		modal.addEventListener('click', (e) => {
			if (e.target === modal) {
				closeModalFunc();
			}
		});
		
		// Close modal with Escape key
		document.addEventListener('keydown', (e) => {
			if (e.key === 'Escape' && modal.classList.contains('opacity-100')) {
				closeModalFunc();
			}
		});
	}
	
	document.addEventListener('DOMContentLoaded', () => {
		createButterflies();
		setupCarousel();
		setupModal();
	});
</script>
