---
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import yourProjectImage from "@assets/images/projects/yourProject.png";
import WokCard from "@components/work/WokCard.astro";
import { getLangFromUrl, useTranslatedPath, useTranslations } from "@i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

const { class: className } = Astro.props;

const allProjects = (await getCollection("projects"))
	.filter((prj) => {
		const [postLang, ...slug] = prj.slug.split("/");
		return postLang === lang;
	})
	.map((prj) => {
		const [postLang, slug] = prj.slug.split("/");

		return {
			...prj,
			slug: slug,
		};
	})
	.sort((a, b) => Number(b.data.pubDate) - Number(a.data.pubDate));
---

<section id="projects" class:list={["section work-preview-section home-dark-section py-12", className]}>
	<div class="col-span-12 col-start-1 mx-auto max-w-7xl">
		<h2 class="sr-only">{t("projects")}</h2>
		<ol class="grid grid-cols-1 gap-12 md:grid-cols-2 lg:gap-16">
			{
				allProjects.map((project, index) => (
					<WokCard
						image={project.data.image.source}
						project={project.data.title}
						description={project.data.description}
						link={`/work/${project.slug}`}
						class={
							index % 2 === 0
								? `md:col-start-1 md:row-start-${Math.floor(index / 2) * 4 + 1} md:row-span-4`
								: `md:col-start-2 md:row-start-${Math.floor(index / 2) * 4 + 2} md:row-span-4`
						} // Note: if you want to remove the stagger entirely, just have the two ${} sections be the same (i.e. switch 2 to 1)
					/>
				))
			}
		</ol>
	</div>
	<!-- Add animated fireflies for ambient effect -->
	<div class="fireflies absolute inset-0 z-0 pointer-events-none"></div>
</section>

<style is:global>
	/* Image clip styling */
	.work-preview-section ol li img {
		--clip: 0%;
		clip-path: inset(var(--clip) round 0.5rem);
	}
	
	/* Parchment styling */
	.parchment {
		background-color: #f8f3e3;
		border-radius: 0.5rem;
		box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.08);
		position: relative;
		overflow: hidden;
	}
	
	/* Paper texture */
	.parchment::before {
		content: "";
		position: absolute;
		inset: 0;
		background-image: url('https://www.transparenttextures.com/patterns/paper.png');
		opacity: 0.4;
		pointer-events: none;
		z-index: 1;
	}
	
	/* Firefly animation */
	.firefly {
		position: absolute;
		width: 6px;
		height: 6px;
		background-color: rgba(255, 210, 120, 0.8);
		border-radius: 50%;
		filter: blur(2px);
		box-shadow: 0 0 10px 2px rgba(255, 180, 0, 0.6);
		animation: firefly 6s ease-in-out infinite;
	}
	
	@keyframes firefly {
		0%, 100% {
			opacity: 0;
			transform: scale(0.3);
		}
		50% {
			opacity: 1;
			transform: scale(1);
		}
		0%, 25%, 75%, 100% {
			transform: translate(0, 0);
		}
		50% {
			transform: translate(10px, -10px);
		}
	}
</style>

<script>
	import { gsap } from "gsap";
	import { ScrollTrigger } from "gsap/ScrollTrigger";

	gsap.registerPlugin(ScrollTrigger);

	function init() {
		// Original animations for image reveals
		const projects = gsap.utils.toArray(".work-preview-section ol li") as gsap.DOMTarget[];
		const previews = gsap.utils.toArray(".work-preview-section ol li img") as gsap.DOMTarget[];
		
		previews.forEach((preview) => {
			gsap.from(preview, {
				scrollTrigger: {
					trigger: preview,
					start: "top bottom",
					end: "center center",
					scrub: 1,
					markers: false,
				},
				ease: "power3.out",
				"--clip": "30%",
			});
		});

		// Background color shift
		gsap.to(".home-dark-section", {
			scrollTrigger: {
				trigger: ".work-preview-section",
				start: "bottom bottom",
				end: "bottom 70%",
				scrub: 0.5,
				markers: false,
				immediateRender: false,
			},
			ease: "none",
			backgroundColor: "#18181b",
			color: "#fff",
		});

		// Sequential reveal animation for WokCards
		projects.forEach((project, index) => {
			// Set initial position based on left/right column
			const isEven = index % 2 === 0;
			
			// Set initial state - invisible and offset from sides
			gsap.set(project, { 
				autoAlpha: 0, 
				x: isEven ? -50 : 50,
				y: 20,
				scale: 0.95
			});
			
			// Create reveal animation with staggered timing
			gsap.to(project, {
				scrollTrigger: {
					trigger: project,
					start: "top bottom-=100",
					end: "center center",
					toggleActions: "play none none reverse",
				},
				duration: 0.9,
				autoAlpha: 1,
				x: 0,
				y: 0,
				scale: 1,
				ease: "power2.out",
				delay: index * 0.15 // Staggered delay
			});
		});

		// Parchment cards animation (if they exist)
		const parchmentCards = gsap.utils.toArray('#projects .parchment:not(li)');
		if (parchmentCards.length > 0) {
			parchmentCards.forEach((card, index) => {
				const isEven = index % 2 === 0;
				
				// Set initial position
				gsap.set(card, { 
					autoAlpha: 0, 
					x: isEven ? -50 : 50,
					y: 20,
					scale: 0.95
				});
				
				// Create animation
				gsap.to(card, {
					scrollTrigger: {
						trigger: card,
						start: "top bottom-=100",
						end: "center center",
						toggleActions: "play none none reverse",
					},
					duration: 0.9,
					autoAlpha: 1,
					x: 0,
					y: 0,
					scale: 1,
					ease: "power2.out",
					delay: index * 0.15 // Stagger the animations
				});
			});
		}
	}

	document.removeEventListener("DOMContentLoaded", init);
	document.addEventListener("DOMContentLoaded", init);
	
	// Create fireflies dynamically for this section
	function createFireflies() {
		const firefliesContainer = document.querySelector('#projects .fireflies');
		if (!firefliesContainer) return;
		
		for (let i = 0; i < 15; i++) {
			const firefly = document.createElement('div');
			firefly.classList.add('firefly');
			
			// Random positioning
			firefly.style.left = `${Math.random() * 100}%`;
			firefly.style.top = `${Math.random() * 100}%`;
			
			// Random animation delay
			firefly.style.animationDelay = `${Math.random() * 6}s`;
			
			firefliesContainer.appendChild(firefly);
		}
	}
	
	document.addEventListener("DOMContentLoaded", createFireflies);
</script>
