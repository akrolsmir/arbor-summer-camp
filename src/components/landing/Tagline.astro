---
import { getLangFromUrl, useTranslations, useTranslatedPath } from "@i18n/utils";

const { class: className } = Astro.props;

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);
---

<div id="smooth-wrapper" class:list={["section tagline-section relative overflow-hidden py-20", className]}>
	<!-- Sunlight glow effect -->
	<div class="sunlight-glow absolute bottom-0 left-1/2 -translate-x-1/2 w-96 h-96 rounded-full bg-gradient-radial from-sunshine-300/40 via-sunshine-400/10 to-transparent"></div>
	
	<!-- Butterflies -->
	<div class="butterflies absolute inset-0 z-0"></div>
	
	<!-- Decorative elements -->
	<div class="sunflower left-sunflower absolute left-20 top-1/2 -translate-y-1/2 hidden lg:block">
		<div class="sunflower-stem"></div>
		<div class="sunflower-head"></div>
	</div>
	
	<div class="sunflower right-sunflower absolute right-20 top-1/2 -translate-y-1/2 hidden lg:block">
		<div class="sunflower-stem"></div>
		<div class="sunflower-head"></div>
	</div>
	
	<div class="col-span-12 flex justify-center">
		<p id="services-tagline" class="tagline-text max-w-5xl text-center font-display font-bold text-4xl md:text-5xl lg:text-7xl text-forest-800">
			{t("tagline")}
		</p>
	</div>
	
	<!-- Add horizontal string lights -->
	<div class="absolute top-10 left-0 right-0 h-10 overflow-hidden">
		<div class="string-lights-horizontal-day"></div>
	</div>
</div>

<style>
	.tagline-section {
		position: relative;
		width: 100%;
		display: grid;
		grid-template-columns: repeat(12, minmax(0, 1fr));
		column-gap: var(--grid-gap);
		background: linear-gradient(to bottom, rgba(240, 249, 255, 0.7), rgba(186, 230, 253, 0.95));
		min-height: 450px;
	}
	
	/* Sunflower styling */
	.sunflower-stem {
		width: 8px;
		height: 120px;
		background: linear-gradient(to bottom, #4C9956, #2E6937);
		margin: 0 auto;
		border-radius: 4px;
	}
	
	.sunflower-head {
		width: 60px;
		height: 60px;
		margin: -10px auto 0;
		background: radial-gradient(circle, #F59E0B 30%, #FBBF24 70%);
		border-radius: 50%;
		box-shadow: 0 0 20px 5px rgba(255, 184, 0, 0.3);
		position: relative;
		animation: sway 5s infinite alternate;
	}
	
	.sunflower-head::before {
		content: "";
		position: absolute;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
		width: 30px;
		height: 30px;
		background: radial-gradient(circle, #92400E 30%, #78350F 70%);
		border-radius: 50%;
	}
	
	@keyframes sway {
		0%, 100% {
			transform: rotate(-5deg);
		}
		50% {
			transform: rotate(5deg);
		}
	}
	
	/* Tagline text styling */
	.tagline-text {
		position: relative;
		z-index: 2;
		text-shadow: 0 2px 10px rgba(255, 255, 255, 0.5), 0 0 30px rgba(79, 230, 180, 0.3);
	}
	
	/* String lights horizontal daytime styling */
	.string-lights-horizontal-day {
		position: absolute;
		width: 100%;
		height: 10px;
		background-image: 
			radial-gradient(circle, rgba(255,255,255,0.9) 0%, rgba(255,255,255,0) 70%);
		background-size: 30px 10px;
		background-position: 0 0;
		background-repeat: space;
		opacity: 0.6;
	}
</style>

<script>
	import { gsap } from "gsap";
	import { ScrollTrigger } from "gsap/ScrollTrigger";
	import { SplitText } from "gsap/SplitText";

	gsap.registerPlugin(ScrollTrigger, SplitText);

	// Create butterflies dynamically
	function createButterflies() {
		const butterfliesContainer = document.querySelector('.tagline-section .butterflies');
		if (!butterfliesContainer) return;
		
		for (let i = 0; i < 10; i++) {
			const butterfly = document.createElement('div');
			butterfly.classList.add('butterfly');
			
			// Random positioning
			butterfly.style.left = `${Math.random() * 100}%`;
			butterfly.style.top = `${Math.random() * 100}%`;
			
			// Random animation delay
			butterfly.style.animationDelay = `${Math.random() * 6}s`;
			
			// Random colors - light pastel shades
			const hue = Math.floor(Math.random() * 60) + 160; // blues and greens
			const saturation = Math.floor(Math.random() * 30) + 70; // fairly saturated
			const lightness = Math.floor(Math.random() * 20) + 70; // light colors
			butterfly.style.backgroundColor = `hsla(${hue}, ${saturation}%, ${lightness}%, 0.7)`;
			
			butterfliesContainer.appendChild(butterfly);
		}
	}

	function init() {
		createButterflies();
		
		// Create text animation
		const split = new SplitText("#services-tagline", { type: "lines" });
		
		// Animate each line with a bright glow effect
		split.lines.forEach((target, index) => {
			gsap.fromTo(target, 
				{ 
					opacity: 0,
					y: 30,
					filter: 'blur(5px)'
				},
				{
					opacity: 1,
					y: 0,
					filter: 'blur(0px)',
					duration: 1.2,
					ease: "power2.out",
					scrollTrigger: {
						trigger: target,
						start: "top bottom-=10%",
						end: "bottom center",
						scrub: 1,
					}
				}
			);
		});
		
		// Add a bright glow to the text on scroll
		gsap.to(".tagline-text", {
			textShadow: "0 2px 15px rgba(79, 230, 180, 0.5), 0 0 30px rgba(255, 235, 170, 0.4)",
			scrollTrigger: {
				trigger: ".tagline-section",
				start: "top center",
				end: "bottom center",
				scrub: true
			}
		});
	}

	document.addEventListener("DOMContentLoaded", init);
</script>
