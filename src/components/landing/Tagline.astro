---
import { getLangFromUrl, useTranslations, useTranslatedPath } from "@i18n/utils";

const { class: className } = Astro.props;

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);
---

<div id="smooth-wrapper" class:list={["section tagline-section relative overflow-hidden py-20", className]}>
	<!-- Campfire glow effect -->
	<div class="campfire-glow absolute bottom-0 left-1/2 -translate-x-1/2 w-96 h-96 rounded-full bg-gradient-radial from-campfire-500/40 via-campfire-700/10 to-transparent"></div>
	
	<!-- Fireflies -->
	<div class="fireflies absolute inset-0 z-0"></div>
	
	<!-- Decorative elements -->
	<div class="torch left-torch absolute left-20 top-1/2 -translate-y-1/2 hidden lg:block">
		<div class="torch-handle"></div>
		<div class="torch-flame"></div>
	</div>
	
	<div class="torch right-torch absolute right-20 top-1/2 -translate-y-1/2 hidden lg:block">
		<div class="torch-handle"></div>
		<div class="torch-flame"></div>
	</div>
	
	<div class="col-span-12 flex justify-center">
		<p id="services-tagline" class="tagline-text max-w-5xl text-center font-display font-bold text-4xl md:text-5xl lg:text-7xl text-white">
			{t("tagline")}
		</p>
	</div>
	
	<!-- Add horizontal string lights -->
	<div class="absolute top-10 left-0 right-0 h-10 overflow-hidden">
		<div class="string-lights-horizontal"></div>
	</div>
</div>

<style>
	.tagline-section {
		position: relative;
		width: 100%;
		display: grid;
		grid-template-columns: repeat(12, minmax(0, 1fr));
		column-gap: var(--grid-gap);
		background: linear-gradient(to bottom, rgba(45, 26, 20, 0.7), rgba(15, 15, 25, 0.95));
		min-height: 450px;
	}
	
	/* Torch styling */
	.torch-handle {
		width: 8px;
		height: 120px;
		background: linear-gradient(to bottom, #4a3321, #2D1A14);
		margin: 0 auto;
		border-radius: 4px;
	}
	
	.torch-flame {
		width: 40px;
		height: 60px;
		margin: -10px auto 0;
		background: radial-gradient(ellipse at bottom, #ffb800, transparent 80%);
		border-radius: 50% 50% 20% 20% / 60% 60% 40% 40%;
		box-shadow: 0 0 20px 5px rgba(255, 184, 0, 0.5);
		position: relative;
		animation: flicker 3s infinite alternate;
	}
	
	@keyframes flicker {
		0%, 100% {
			transform: scale(1);
			opacity: 0.8;
		}
		50% {
			transform: scale(1.1);
			opacity: 1;
		}
	}
	
	/* Tagline text styling */
	.tagline-text {
		position: relative;
		z-index: 2;
		text-shadow: 0 2px 10px rgba(0, 0, 0, 0.5), 0 0 30px rgba(230, 120, 79, 0.3);
	}
</style>

<script>
	import { gsap } from "gsap";
	import { ScrollTrigger } from "gsap/ScrollTrigger";
	import { SplitText } from "gsap/SplitText";

	gsap.registerPlugin(ScrollTrigger, SplitText);

	function createFireflies() {
		const firefliesContainer = document.querySelector('.tagline-section .fireflies');
		if (!firefliesContainer) return;
		
		for (let i = 0; i < 15; i++) {
			const firefly = document.createElement('div');
			firefly.classList.add('firefly');
			
			// Random positioning
			firefly.style.left = `${Math.random() * 100}%`;
			firefly.style.top = `${Math.random() * 100}%`;
			
			// Random animation delay
			firefly.style.animationDelay = `${Math.random() * 6}s`;
			
			firefliesContainer.appendChild(firefly);
		}
	}

	function init() {
		createFireflies();
		
		// Create text animation
		const split = new SplitText("#services-tagline", { type: "lines" });
		
		// Animate each line with a warm glow effect
		split.lines.forEach((target, index) => {
			gsap.fromTo(target, 
				{ 
					opacity: 0,
					y: 30,
					filter: 'blur(5px)'
				},
				{
					opacity: 1,
					y: 0,
					filter: 'blur(0px)',
					duration: 1.2,
					ease: "power2.out",
					scrollTrigger: {
						trigger: target,
						start: "top bottom-=10%",
						end: "bottom center",
						scrub: 1,
					}
				}
			);
		});
		
		// Add a warm glow to the text on scroll
		gsap.to(".tagline-text", {
			textShadow: "0 2px 15px rgba(230, 120, 79, 0.5), 0 0 30px rgba(255, 184, 0, 0.4)",
			scrollTrigger: {
				trigger: ".tagline-section",
				start: "top center",
				end: "bottom center",
				scrub: true
			}
		});
	}

	document.addEventListener("DOMContentLoaded", init);
</script>
