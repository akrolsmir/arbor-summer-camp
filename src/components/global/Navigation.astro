---
import { Icon } from "astro-icon/components";

const isDev = import.meta.env.DEV;

// Simplified navigation without language handling
let pages = [
	{
		title: "Home",
		url: "/",
	},
	{
		title: "Branches",
		url: "#branches",
	},
	{
		title: "Incubator",
		url: "/incubator/",
	},
	{
		title: "Sponsors",
		url: "/sponsors/",
	}
];

// if (isDev) {
// 	pages.push({
// 		title: "Overview",
// 		url: "/system/overview",
// 	});
// }

const { pathname } = Astro.url;
---

<header class="fixed top-0 left-0 right-0 z-50 px-6 py-4 md:px-8 md:py-6">
	<div class="container mx-auto flex items-center justify-between">
		<!-- Logo -->
		<a href="/" aria-label="Home" class="logo flex items-center">
			<img 
				src="/images/minimal_green_cs_tree_logo.svg" 
				alt="Logo" 
				class="h-8 w-auto md:h-10"
			/>
		</a>

		<!-- Mobile menu button -->
		<button 
			id="mobile-menu-toggle" 
			class="flex md:hidden items-center justify-center p-2 text-forest-900"
			aria-label="Toggle menu"
		>
			<Icon name="octicon:three-bars-16" width="24" class="menu-icon" />
			<Icon name="octicon:x-16" width="24" class="close-icon hidden" />
		</button>

		<!-- Navigation -->
		<nav id="main-nav" class="hidden md:flex items-center space-x-8">
			{
				pages.map((page) => (
					<a
						href={page.url}
						class={`nav-link relative font-medium text-forest-900 hover:text-forest-700 transition-colors ${
							pathname === page.url || pathname === page.url.slice(0, -1)
								? "active"
								: ""
						}`}
					>
						{page.title}
					</a>
				))
			}
			<a 
				href="/#faq" 
				class="nav-link relative font-medium text-forest-900 hover:text-forest-700 transition-colors"
				data-faq-link
			>
				FAQ
			</a>
		</nav>
	</div>

	<!-- Mobile menu (hidden by default) -->
	<div id="mobile-menu" class="hidden bg-forest-50/95 shadow-lg rounded-b-lg mt-2 py-4 px-6 md:hidden">
		<nav class="flex flex-col space-y-4">
			{
				pages.map((page) => (
					<a
						href={page.url}
						class={`text-lg font-medium text-forest-900 hover:text-forest-700 ${
							pathname === page.url || pathname === page.url.slice(0, -1)
								? "active"
								: ""
						}`}
					>
						{page.title}
					</a>
				))
			}
			<a 
				href="/#faq" 
				class="text-lg font-medium text-forest-900 hover:text-forest-700"
				data-faq-link
			>
				FAQ
			</a>
		</nav>
	</div>
</header>

<style>
	header {
		background-color: rgba(240, 253, 244, 0); /* forest-50 with 0 opacity */
		backdrop-filter: blur(0px);
		transition: all 0.3s ease;
	}

	header.scrolled {
		padding-top: 0.5rem;
		padding-bottom: 0.5rem;
		background-color: rgba(240, 253, 244, 0.95); /* forest-50 with 95% opacity */
		backdrop-filter: blur(8px);
		box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
	}

	.nav-link::after {
		content: "";
		position: absolute;
		bottom: -4px;
		left: 0;
		width: 100%;
		height: 2px;
		background-color: #166534; /* forest-800 */
		transform: scaleX(0);
		transform-origin: right;
		transition: transform 0.3s ease;
	}

	.nav-link:hover::after {
		transform: scaleX(1);
		transform-origin: left;
	}

	.nav-link.active::after {
		transform: scaleX(1);
		background-color: #166534; /* forest-800 */
	}

	/* Mobile menu active styles */
	.mobile-menu-open {
		max-height: 300px;
		opacity: 1;
	}

	#mobile-menu a.active {
		color: #166534; /* forest-800 */
		font-weight: 600;
	}
</style>

<script>
	import { gsap } from "gsap";
	import { ScrollTrigger } from "gsap/ScrollTrigger";
	import { ScrollToPlugin } from "gsap/ScrollToPlugin";

	gsap.registerPlugin(ScrollTrigger, ScrollToPlugin);

	function init() {
		// Header scroll effect
		const header = document.querySelector('header');
		
		// Only add the scrolled class when user has scrolled at least 10px
		ScrollTrigger.create({
			start: 0,
			onUpdate: (self) => {
				if (window.scrollY < 10) {
					header?.classList.remove('scrolled');
				} else {
					header?.classList.add('scrolled');
				}
			}
		});

		// Mobile menu toggle
		const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
		const mobileMenu = document.getElementById('mobile-menu');
		const menuIcon = document.querySelector('.menu-icon');
		const closeIcon = document.querySelector('.close-icon');

		mobileMenuToggle?.addEventListener('click', () => {
			mobileMenu?.classList.toggle('hidden');
			menuIcon?.classList.toggle('hidden');
			closeIcon?.classList.toggle('hidden');
		});

		// FAQ scroll handling
		const faqLinks = document.querySelectorAll('a[data-faq-link]');
		faqLinks.forEach(link => {
			link.addEventListener('click', (e) => {
				// Check if we're on the homepage
				if (window.location.pathname === '/' || window.location.pathname === '/it/') {
					e.preventDefault();
					gsap.to(window, {
						duration: 0.8,
						scrollTo: {
							y: "#faq",
							offsetY: 100
						},
						ease: "power3.inOut"
					});
					
					// Close mobile menu if open
					if (mobileMenu && !mobileMenu.classList.contains('hidden')) {
						mobileMenu.classList.add('hidden');
						menuIcon?.classList.remove('hidden');
						closeIcon?.classList.add('hidden');
					}
				} else {
					// If not on homepage, navigate to homepage without the hash
					// and set a session storage flag to scroll after navigation
					e.preventDefault();
					sessionStorage.setItem('scrollToFaq', 'true');
					window.location.href = '/';
				}
			});
		});

		// Check for FAQ hash on page load OR the session storage flag
		if (window.location.hash === '#faq' || sessionStorage.getItem('scrollToFaq') === 'true') {
			// Clear the flag immediately
			sessionStorage.removeItem('scrollToFaq');
			
			// Delay the scroll slightly to ensure the page is fully rendered
			setTimeout(() => {
				gsap.to(window, {
					duration: 0.8,
					scrollTo: {
						y: "#faq",
						offsetY: 100
					},
					ease: "power3.inOut"
				});
			}, 100); // Small delay to ensure elements are loaded
		}

		// Highlight active section when scrolling
		const sections = document.querySelectorAll('section[id]');
		const navLinks = document.querySelectorAll('.nav-link');
		
		if (sections.length > 0) {
			ScrollTrigger.create({
				start: 'top 30%',
				end: 'bottom 70%',
				markers: false,
				onUpdate: function() {
					let currentSection = '';
					
					sections.forEach(section => {
						const sectionTop = section.offsetTop;
						const sectionHeight = section.offsetHeight;
						
						if (window.scrollY >= sectionTop - 200 && 
							window.scrollY < sectionTop + sectionHeight - 200) {
							currentSection = section.getAttribute('id') || '';
						}
					});
					
					navLinks.forEach(link => {
						link.classList.remove('active');
						const href = link.getAttribute('href');
						if (href && href.includes(`#${currentSection}`)) {
							link.classList.add('active');
						}
					});
				}
			});
		}

		// Branch scroll handling
		const branchesLinks = document.querySelectorAll('a[href="#branches"]');
		branchesLinks.forEach(link => {
			link.addEventListener('click', (e) => {
				e.preventDefault();
				
				// Check if we're on the homepage
				if (window.location.pathname === '/' || window.location.pathname === '/it/') {
					// If on homepage, just scroll to the branches section
					gsap.to(window, {
						duration: 0.8,
						scrollTo: {
							y: "#branches",
							offsetY: 100
						},
						ease: "power3.inOut"
					});
					
					// Close mobile menu if open
					if (mobileMenu && !mobileMenu.classList.contains('hidden')) {
						mobileMenu.classList.add('hidden');
						menuIcon?.classList.remove('hidden');
						closeIcon?.classList.add('hidden');
					}
				} else {
					// If not on homepage, navigate to homepage without the hash
					// and set a session storage flag to scroll after navigation
					sessionStorage.setItem('scrollToBranches', 'true');
					window.location.href = '/';
				}
			});
		});

		// Check for branches hash on page load OR the session storage flag
		if (window.location.hash === '#branches' || sessionStorage.getItem('scrollToBranches') === 'true') {
			// Clear the flag immediately
			sessionStorage.removeItem('scrollToBranches');
			
			// Delay the scroll slightly to ensure the page is fully rendered
			setTimeout(() => {
				gsap.to(window, {
					duration: 0.8, // Longer duration for smoother scroll
					scrollTo: {
						y: "#branches",
						offsetY: 100
					},
					ease: "power3.inOut"
				});
			}, 100); // Small delay to ensure elements are loaded
		}
	}

	// Initialize on page load
	document.addEventListener("DOMContentLoaded", init);
	
	// Also initialize on view transitions (for Astro)
	document.addEventListener("astro:page-load", init);
</script>
