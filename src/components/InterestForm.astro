---
const { class: className } = Astro.props;
import { getLangFromUrl, useTranslations, useTranslatedPath } from "@i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);
---

<div class="w-full max-w-md">
  <form id="interestForm" class="space-y-4">
    <div class="flex gap-2">
      <input
        type="email"
        id="email"
        name="email"
        placeholder="Enter your email"
        class={`flex-1 px-4 py-2 rounded-lg border border-base-300 focus:border-secondary focus:outline-none transition-colors`}
        required
      />
      <button
        type="submit"
        id="notifyButton"
        class="px-6 py-2 rounded-lg bg-gradient-to-r from-secondary/60 to-secondary/70 text-secondary-content hover:from-success/60 hover:to-success/70 transition-all duration-300"
      >
        Notify Me
      </button>
    </div>

    <div id="successMessage" class="hidden text-md text-base-content italic">
      Thanks for your interest! Feel free to add more information below.
    </div>

    <div id="additionalFields" class="hidden space-y-4 transition-all duration-300">
    </div>
  </form>
</div>

<script>

  const form = document.getElementById('interestForm') as HTMLFormElement;  

  const additionalFields = document.getElementById('additionalFields');
  const emailInput = document.getElementById('email');
  const notifyButton = document.getElementById('notifyButton');
  const successMessage = document.getElementById('successMessage');
  let currentRecordId: string | null = null;
  let fieldOptions: Record<string, string[]> = {};

  async function fetchFieldOptions() {
    const AIRTABLE_API_KEY = import.meta.env.PUBLIC_AIRTABLE_API_KEY;
    const AIRTABLE_BASE_ID = import.meta.env.PUBLIC_AIRTABLE_BASE_ID;
    const TABLE_NAME = 'Interest List Website';

    try {
      // First, try to fetch the table schema
      const schemaResponse = await fetch(
        `https://api.airtable.com/v0/meta/bases/${AIRTABLE_BASE_ID}/tables`,
        {
          headers: {
            'Authorization': `Bearer ${AIRTABLE_API_KEY}`,
            'Content-Type': 'application/json'
          }
        }
      );

    //   console.log('Schema response status:', schemaResponse.status);
      const schemaData = await schemaResponse.json();
    //   console.log('Schema data:', schemaData);

      if (!schemaResponse.ok) {
        throw new Error(`Schema fetch failed: ${schemaData.error?.message}`);
      }

      const table = schemaData.tables.find((t: any) => t.name === TABLE_NAME);
      
      if (table) {
        table.fields.forEach((field: any) => {
          if (field.type === 'multipleSelects' || field.type === 'singleSelect') {
            fieldOptions[field.name] = field.options.choices.map((c: any) => c.name);
            // console.log(`Found options for field ${field.name}:`, fieldOptions[field.name]);
          }
        });
      }
    } catch (error) {
      console.error('Error fetching field options:', error);
    }
  }

  async function submitToAirtable(formData: FormData, recordId?: string) {
    const AIRTABLE_API_KEY = import.meta.env.PUBLIC_AIRTABLE_API_KEY;
    const AIRTABLE_BASE_ID = import.meta.env.PUBLIC_AIRTABLE_BASE_ID;
    const TABLE_NAME = 'Interest List Website';

    try {
      const url = recordId 
        ? `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${TABLE_NAME}/${recordId}`
        : `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${TABLE_NAME}`;

      const method = recordId ? 'PATCH' : 'POST';
      
      // Only include fields that have values
      const fields: Record<string, any> = {};
      
      // Always include email for new records
      if (!recordId) {
        fields['Email'] = formData.get('email');
      }

      // Add other fields if they have values
      const fullName = formData.get('fullName');
      if (fullName) fields['Full Name'] = fullName;

      const questions = formData.get('questions');
      if (questions) fields['Questions'] = questions;

      // Handle dropdown fields - only include if they match valid options
      for (const [fieldName, options] of Object.entries(fieldOptions)) {
        const value = formData.get(fieldName);
        if (value && options.includes(value as string)) {
          fields[fieldName] = value;
        }
      }

      const body = recordId 
        ? { fields }
        : { records: [{ fields }] };

      console.log('Submitting with body:', body); // Debug log

      const response = await fetch(url, {
        method,
        headers: {
          'Authorization': `Bearer ${AIRTABLE_API_KEY}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(body)
      });

      const responseData = await response.json();
      console.log('Airtable response:', responseData);

      if (!response.ok) {
        throw new Error(`Failed to submit: ${responseData.error?.message || 'Unknown error'}`);
      }

      // Store the record ID from the first submission
      if (!recordId && responseData.records) {
        currentRecordId = responseData.records[0].id;
      }
      
      return true;
    } catch (error) {
      console.error('Error submitting to Airtable:', error);
      return false;
    }
  }

  function createAdditionalFields(
    includeDropdowns: boolean = true, 
  ) {
    if (!additionalFields) return;

    let fieldsHTML = `
      <input
        type="text"
        id="fullName"
        name="fullName"
        placeholder="Full Name"
        class="w-full px-4 py-2 rounded-lg border border-base-300 focus:border-secondary focus:outline-none transition-colors"
      />
    `;

    if (includeDropdowns) {
      Object.entries(fieldOptions).forEach(([fieldName, options]) => {
        const fieldId = fieldName.toLowerCase().replace(/\s+/g, '-');
        fieldsHTML += `
          <select
            id="${fieldId}"
            name="${fieldName}"
            class="w-full px-4 py-2 rounded-lg border border-base-300 focus:border-secondary focus:outline-none transition-colors"
          >
            <option value="">Select ${fieldName}</option>
            ${options.map(option => `<option value="${option}">${option}</option>`).join('')}
          </select>
        `;
      });
    }

    fieldsHTML += `
      <textarea
        id="questions"
        name="questions"
        placeholder="Any questions for us?"
        rows="${window.innerWidth < 768 ? '2' : '3'}"
        class="w-full px-4 py-2 rounded-lg border border-base-300 focus:border-secondary focus:outline-none transition-colors resize-none"
      ></textarea>
      <button
        type="submit"
        id="submitButton"
        class="w-full px-6 py-2 rounded-lg bg-gradient-to-r from-secondary/60 to-secondary/70 text-secondary-content hover:from-success/60 hover:to-success/70 transition-all duration-300"
      >
        Submit
      </button>
    `;

    additionalFields.innerHTML = fieldsHTML;

    // Add auto-resize functionality to textarea
    const textarea = document.getElementById('questions') as HTMLTextAreaElement;
    if (textarea) {
      const adjustHeight = () => {
        textarea.style.height = 'auto';
        textarea.style.height = textarea.scrollHeight + 'px';
      };

      textarea.addEventListener('input', adjustHeight);
      window.addEventListener('resize', adjustHeight);
    }

    // Existing resize listener for rows
    window.addEventListener('resize', () => {
      const textarea = document.getElementById('questions') as HTMLTextAreaElement;
      if (textarea) {
        textarea.rows = window.innerWidth < 768 ? 2 : 3;
      }
    });
  }

  // Modify the submit handler
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(e.target as HTMLFormElement);
    
    if (!additionalFields?.classList.contains('hidden')) {
      // Full form submission - update existing record
      const success = await submitToAirtable(formData, currentRecordId || undefined);
      if (success) {
        alert('Thank you for your interest! We\'ll be in touch soon.');
        (form as HTMLFormElement).reset();
        additionalFields?.classList.add('hidden');
        successMessage?.classList.add('hidden');
        notifyButton?.classList.remove('opacity-50', 'cursor-not-allowed');
        currentRecordId = null;
      } else {
        alert('There was an error submitting your information. Please try again.');
      }
    } else {
      // First submission - just email
      const success = await submitToAirtable(formData);
      if (success) {
        // Fetch field options only when needed
        await fetchFieldOptions();
        additionalFields?.classList.remove('hidden');
        successMessage?.classList.remove('hidden');
        notifyButton?.classList.add('opacity-50', 'cursor-not-allowed');
        createAdditionalFields(false);
      } else {
        alert('There was an error submitting your email. Please try again.');
      }
    }
  });

</script>